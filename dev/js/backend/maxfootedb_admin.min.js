/**
 * JavaScript Admin Functions - maxfootedb-admin.min.js
 *
 * @author   Jake Evans
 * @category JavaScript
 * @package  Includes/Assets/Js
 * @version  6.0.0
 */

console.log('This is the JavaScript Object that holds all PHP Variables for use in the maxfootedb Admin JavaScript file:');
console.log(maxfooteDbPhpVariables);


// All functions wrapped in jQuery( document ).ready()...
jQuery(document).ready(function ($) {
	'use strict';

	/* BEGINNING SECTION TO CALL ALL FUNCTIONS IN FILE... */

	// Function to display the admin pointer message when entering the Question Mark image with mouse...
	maxfooteDbAdminPointersJavascript();

	// Function that will handle the saving of the user's License Key.
	maxfooteDbPluginPageDashboardSaveKey();

	// This is a function to save a new Vendor entry to the database on the admin side.
	maxfooteDbAdminSaveToDatabase();

	// This is a function to delete a Vendor entry in the database on the admin side.
	maxfooteDbAdminDeleteEntry();

	// This is a function to update a Vendor entry in the database on the admin side.
	maxfooteDbAdminUpdateToDatabase()

	// Function that sets the accordion properties
	set_accordion();

	// This is a function to delete a Vendor entry in the database on the admin side.
	function maxfooteDbAdminDeleteEntry() {
		$(document).on('click', '.maxfoote-delete-vendor', function (event) {
			var id = $(this).attr('data-dbid');
			console.log(id);
			var data = {
				'action': 'maxfootedb_admin_delete_entry_fromdb_action',
				'security': maxfooteDbPhpVariables.adminnonce3,
				'ID': id
			};
			$.post(ajaxurl, data, function (response) {
				console.log(response);
				// Task: Tweak the User responses for when we are trying to add to the database - remove the error message upon clicking the add vendor button. Introduce some kind of success message.
				// Stretch goal - introduce some kind of spinner thing that turns on when clicking the add vendor button
				//document.location.reload(true);
				
				$('.maxfoote-spinner').animate( {'opacity':'1'}, 500 )
				$('.maxfoote-displayentries-response-div-actual-container').html("<p class='maxfoote-displayentries-response-formatted-message-success'>Success! You just deleted this Vendor from the Database!<p>");
				setTimeout(function(){
					document.location.reload(true);
				}, 4000 );				

			});
			event.preventDefault ? event.preventDefault() : event.returnValue = false;
		});
	}
	
	function set_accordion() {
		var accordion = document.getElementsByClassName("accordion");
		for (var i = 0; i < accordion.length; i++) {
			accordion[i].addEventListener("click", function () {
				/* Toggle between adding and removing the "active" class,
				to highlight the button that controls the panel */
				this.classList.toggle("active");				

				/* Toggle between hiding and showing the active panel */
				var panel = this.nextElementSibling;
				if (panel.style.display === "block") {
					panel.style.display = "none";
				} else {
					panel.style.display = "block";
				}
			});
		}
	}

	function isEmpty(data) {
		if (data.length < 1) {
			return true;
		} else {
			return null;
		}
	}

	// This is a function to save a new Vendor entry to the database on the admin side.
	function maxfooteDbAdminSaveToDatabase() {
		$(document).on('click', '#maxfoote-admin-save-vendor', function (event) {

			$('.maxfoote-spinner').animate( {'opacity':'1'}, 500 )



			var vendorname = $('#maxfoote-form-newsite-vendorname').val();
			var vendortype = $('#maxfoote-form-newsite-vendortype').val();
			var vendorcerts = $('#maxfoote-form-newsite-vendorcerts').val();
			var vendorlicense = $('#maxfoote-form-newsite-vendorlicense').val();
			var vendortrade = $('#maxfoote-form-newsite-vendortrade').val();
			var vendoraddress = $('#maxfoote-form-newsite-vendoraddress').val();
			var vendoraddress2 = $('#maxfoote-form-newsite-vendoraddress2').val();
			var vendorcity = $('#maxfoote-form-newsite-vendorcity').val();
			var vendorstate = $('#maxfoote-form-newsite-vendorstate').val();
			var vendorzip = $('#maxfoote-form-newsite-vendorzip').val();
			var vendorphone = $('#maxfoote-form-newsite-vendorphone').val();
			var vendorcontact = $('#maxfoote-form-newsite-vendorcontact').val();
			var vendoremail = $('#maxfoote-form-newsite-vendoremail').val();
			var vendorenterprise = $('#maxfoote-form-newsite-vendorenterprise').val();
			var vendorlastupdated = $('#maxfoote-form-newsite-vendorlastupdated').val();
			var eventlocation = $('#maxfoote-form-newsite-eventlocation').val();

			if (isEmpty(vendorname) || isEmpty(vendortype) || isEmpty(vendorcerts) || isEmpty(vendorlicense) || isEmpty(vendortrade) || isEmpty(vendoraddress) || isEmpty(vendorcity) || isEmpty(vendorstate) || isEmpty(vendorzip) || isEmpty(vendorphone) || isEmpty(vendorcontact) || isEmpty(vendoremail) || isEmpty(vendorenterprise) || isEmpty(vendorlastupdated) || isEmpty(eventlocation)) {
				alert("Please make sure all fields are completed");
			} else {
				var data = {
					'action': 'maxfootedb_admin_save_todb_action',
					'security': maxfooteDbPhpVariables.adminnonce2,
					'vendorname': vendorname,
					'vendortype': vendortype,
					'vendorcerts': vendorcerts,
					'vendorlicense': vendorlicense,
					'vendortrade': vendortrade,
					'vendoraddress': vendoraddress,
					'vendoraddress2': vendoraddress2,
					'vendorcity': vendorcity,
					'vendorstate': vendorstate,
					'vendorzip': vendorzip,
					'vendorphone': vendorphone,
					'vendorcontact': vendorcontact,
					'vendoremail': vendoremail,
					'vendorenterprise': vendorenterprise,
					'vendorlastupdated': vendorlastupdated,
					'eventlocation': eventlocation
				};
				console.log(data);


				
				$.post(ajaxurl, data, function (response) {
					console.log(response);
					if ('Entry already exists' === response) {
						$('.maxfoote-spinner').animate( {'opacity':'0'}, 500 )
						$('.maxfoote-displayentries-response-div-actual-container').html("<p class='maxfoote-displayentries-response-formatted-message-vendor-exists'>Whoops! Looks like there's already a Vendor in the Database with this name! Please check the Vendor name and try again.<p>");
					} else {
						$('.maxfoote-spinner').animate( {'opacity':'1'}, 500 )
						$('.maxfoote-displayentries-response-div-actual-container').html("<p class='maxfoote-displayentries-response-formatted-message-success'>Success! You just added a new Vendor to the Database!<p>");
						setTimeout(function(){
							document.location.reload(true);
						}, 4000 );

					}
					// Task: Tweak the User responses for when we are trying to add to the database - remove the error message upon clicking the add vendor button. Introduce some kind of success message.
					// Stretch goal - introduce some kind of spinner thing that turns on when clicking the add vendor button
				});
				
				event.preventDefault ? event.preventDefault() : event.returnValue = false;
			};
		});
	}

	// This is a function to update a Vendor entry to the database on the admin side.
	function maxfooteDbAdminUpdateToDatabase() {
		$(document).on('click', '.maxfoote-update-vendor', function (event) {
			var id = $(this).attr('data-dbid');
			console.log("the id is: " + id);

			var vendorname = $('#vendorname' + id).val();			
			var vendortype = $('#vendortype' + id).val();
			var vendorcerts = $('#vendorcerts' + id).val();
			var vendorlicense = $('#vendorlicense' + id).val();
			var vendortrade = $('#vendortrade' + id).val();
			var vendoraddress = $('#vendoraddress' + id).val();
			var vendoraddress2 = $('#vendoraddress2' + id).val();
			var vendorcity = $('#vendorcity' + id).val();
			var vendorstate = $('#vendorstate' + id).val();
			var vendorzip = $('#vendorzip' + id).val();
			var vendorphone = $('#vendorphone' + id).val();
			var vendorcontact = $('#vendorvendorcontactname' + id).val();
			var vendoremail = $('#vendoremail' + id).val();
			var vendorenterprise = $('#vendorenterprise' + id).val();
			var vendorlastupdated = $('#vendorlastupdated' + id).val();
			var eventlocation = $('#eventlocation' + id).val();

			if (('' === vendorname ) || ('' === vendortype ) || ('' === vendorcerts ) || ('' === vendorlicense ) || ('' === vendortrade ) || ('' === vendoraddress ) || ('' === vendorcity ) || ('' === vendorstate ) || ('' === vendorzip ) || ('' === vendorphone ) || ('' === vendorcontact ) || ('' === vendoremail ) || ('' === vendorenterprise) || ('' === vendorlastupdated ) || ('' === eventlocation )) {
				alert("Please make sure all fields are completed");
			} else {
				var data = {
					'action': 'maxfootedb_admin_update_entry_indb_action',
					'security': maxfooteDbPhpVariables.adminnonce4,
					'ID': id,
					'vendorname': vendorname,
					'vendortype': vendortype,
					'vendorcerts': vendorcerts,
					'vendorlicense': vendorlicense,
					'vendortrade': vendortrade,
					'vendoraddress': vendoraddress,
					'vendoraddress2': vendoraddress2,
					'vendorcity': vendorcity,
					'vendorstate': vendorstate,
					'vendorzip': vendorzip,
					'vendorphone': vendorphone,
					'vendorcontact': vendorcontact,
					'vendoremail': vendoremail,
					'vendorenterprise': vendorenterprise,
					'vendorlastupdated': vendorlastupdated,
					'eventlocation': eventlocation
				};

				console.log(data);

				$.post(ajaxurl, data, function (response) {
					console.log(response);
					console.log("Vendor Updated");

					if ('Entry already exists' === response) {
						$('.maxfoote-spinner').animate( {'opacity':'0'}, 500 )
						$('.maxfoote-displayentries-response-div-actual-container').html("<p class='maxfoote-displayentries-response-formatted-message-vendor-exists'>Whoops! Looks like there's already a Vendor in the Database with this name! Please check the Vendor name and try again.<p>");
					} else {
						$('.maxfoote-spinner').animate( {'opacity':'1'}, 500 )
						$('.maxfoote-displayentries-response-div-actual-container').html("<p class='maxfoote-displayentries-response-formatted-message-success'>Success! You just updated this Vendor in the Database!<p>");
						setTimeout(function(){
							document.location.reload(true);
						}, 4000 );

					}

					// Task: Tweak the User responses for when we are trying to add to the database - remove the error message upon clicking the add vendor button. Introduce some kind of success message.
					// Stretch goal - introduce some kind of spinner thing that turns on when clicking the add vendor button
					//document.location.reload(true);
				});

				event.preventDefault ? event.preventDefault() : event.returnValue = false;
			};
		});
	}

	//masking();

	function masking() {
		var phoneMask = IMask(
			document.getElementById('maxfoote-form-contactphone'), {
			mask: '(000) 000-0000'
		});
	}

	// Function that will handle the saving of the user's License Key.
	function maxfooteDbPluginPageDashboardSaveKey() {

		// When the 'Save' button is clicked at the top of the dashboard...
		$('#maxfoote-extension-genreric-key-dashboard-form-toplevel').on('submit', function () {

			var license = $('#maxfoote-extension-genreric-key-dashboard-input-toplevel').val();

			// Make Ajax call to get display options.
			var data = {
				'action': 'maxfootedb_save_license_key_action',
				'security': maxfooteDbPhpVariables.adminnonce1,
				'license': license
			};

			console.log(data);

			$.post(ajaxurl, data, function (response) {

				document.location.reload(true);

			});


			event.preventDefault ? event.preventDefault() : event.returnValue = false;

		});

		// When the 'Save' button is clicked from the plugin's entry...
		$('#maxfoote-extension-genreric-key-plugins-page-button-toplevel').on('click', function () {

			var license = $(this).prev().val();

			// Make Ajax call to get display options.
			var data = {
				'action': 'maxfootedb_save_license_key_action',
				'security': maxfooteDbPhpVariables.adminnonce1,
				'license': license
			};

			console.log(data);

			$.post(ajaxurl, data, function (response) {

				document.location.reload(true);

			});
			event.preventDefault ? event.preventDefault() : event.returnValue = false;
		});
	}


	/* ENDING SECTION TO CALL ALL FUNCTIONS IN FILE... */

	// Function to display the admin pointer message when entering the Question Mark image with mouse...
	function maxfooteDbAdminPointersJavascript() {

		$('body').on('mouseenter', '.maxfoote-icon-image-question', function () {

			var label = $(this).attr('data-label');
			var pointer;

			// Switch for which admin message to display
			switch (label) {
				case 'book-form-isbn10':
					pointer = $(this).pointer({
						content: '<h3>' + maxfootePhpVariables.trans135 + '</h3><p class="maxfoote-admin-pointer">' + maxfootePhpVariables.trans173 + '.</p>',
						position: {
							edge: 'right',
							align: 'right'
						}
					});
					break;
				default:
			}

			// Open the pointer on mouseenter.
			pointer.pointer('open');

			// Close the pointer on mouseleave.
			$('body').on('mouseleave', '.maxfoote-icon-image-question', function () {
				pointer.pointer('close');
			});

		});

		$('body').on('mouseenter', '.maxfoote-icon-image-question-with-link', function () {

			var label = $(this).attr('data-label');
			var pointer;

			// Switch for which admin message to display
			switch (label) {
				case 'book-form-libraries':
					pointer = $(this).pointer({
						content: '<h3>' + maxfootePhpVariables.trans203 + '</h3><p class="maxfoote-admin-pointer">' + maxfootePhpVariables.trans204 + maxfootePhpVariables.SETTINGS_PAGE_URL + maxfootePhpVariables.trans205 + '.</p>',
						position: {
							edge: 'right',
							align: 'right'
						}
					});
					break;
				default:
			}

			// Open the pointer on mouseenter
			pointer.pointer('open');

		});
	};
});
